{% extends "base.jinja2" %}

{% block head %}
  <link rel="stylesheet" href="{{ url_for('static', filename='css/flatpickr.min.css') }}">
  <link rel="stylesheet" href="{{ url_for('static', filename='css/tokenfield.css') }}">
  <style id="shame">
    [v-cloak] {
      display: none;
    }

    .photoPreview {
      box-shadow: rgba(0,0,0,0.2) 1px 1px 3px;
      display: inline-block;
      max-width: 33%;
      padding: 1rem;
      position: relative;
      width: 30%;
    }
    .photoPreview > img {
      width: 100%;
    }
    .photoPreview > button {
      background-color: rgba(255,0,0,0.3);
      border-radius: 50%;
      color: white;
      font-size: 2rem;
      height: 4rem;
      margin: 0;
      opacity: 0;
      padding: 0;
      position: absolute;
      right: -2rem;
      top: -2rem;
      width: 4rem;
    }
    .photoPreview > button:hover {
      background-color: rgba(255,0,0,1);
    }
    .photoPreview:hover > button {
      opacity: 1.0;
    }

    .tokenfield {
      box-sizing: border-box;
      margin-bottom: 15px;
      overflow: hidden;
    }
    .syndicate-to-option {
      background-color: rgba(0,0,0,0.15);
      border-radius: 0.5rem;
      display: inline-block;
      padding: 0.5rem 1rem;
    }
    .syndicate-to-option input {
      margin-bottom: 0;
    }
  </style>
  <script src="{{ url_for('static', filename='js/flatpickr.js') }}"></script>
  <script src="{{ url_for('static', filename='js/tokenfield.min.js') }}"></script>
  <script src="{{ url_for('static', filename='js/vue.js') }}"></script>
{% endblock %}
{% block body %}
<div class="container">
  <form method="POST" action="{{ url_for('api.publish') }}" enctype="multipart/form-data">
    <input type="hidden" name="h" value="event" />
    <div class="row">
      <h4>Posting as <strong>{{ me }}</strong></h4>
    </div>
    <div class="row">
      <div class="two-thirds column">
        <label for="name">Event Name</label>
        <input type="text" class="util-full-width" name="name" />
      </div>
    </div>
    <!-- TODO: date/time picker w/ TZ -->
    <div class="row">
      <div class="two-thirds column">
        <label for="start">Start Date/Time</label>
        <input type="text" class="util-full-width datetime" name="start" placeholder="2016-12-06 19:30" />
      </div>
    </div>
    <!-- TODO: date/time picker w/ TZ -->
    <div class="row">
      <div class="two-thirds column">
        <label for="end">End Date/Time</label>
        <input type="text" class="util-full-width datetime" name="end" placeholder="2016-12-06 21:30" />
      </div>
    </div>
    <!-- TODO: venue picker -->
    <div class="row">
      <div class="five columns">
        <label for="location">Location</label>
        <input type="text" class="util-full-width" name="location" />
      </div>
      <div class="three columns">
        <label for="tzoffset">Timezone</label>
        <input type="text" class="util-full-width" name="tzoffset" placeholder="-05:00" />
      </div>
    </div>
    <div class="row">
      <div class="two-thirds column">
        <label for="category">Categories</label>
        <input type="text" class="util-full-width" id="category" name="category" />
      </div>
    </div>
    <div class="row" id="photos">
      <div class="two-thirds column">
        <label>Poster Image</label>
        {% raw %}
        <div v-if="photos.length > 0" v-cloak style="margin-bottom: 1.5rem">
          <div v-for="(photo,idx) of photos" class="photoPreview">
            <img :src="photo" />
            <button @click.prevent="removePhoto(idx)" title="Remove this photo">x</button>
            <input type="hidden" name="photo[]" :value="photo" />
          </div>
        </div>
        <div class="row" style="position: relative">
          <div class="add-file-inputs">
            <input type="text" class="util-full-width" name="photo[]" @change="addPhotoFromUrl" placeholder="Add Photo via URL" v-model="photoInput" />
            <div v-if="photoFile" v-cloak style="margin-bottom: 1.5rem">
              <div class="photoPreview">
                <img :src="photoFile" />
                <button @click.prevent="removePhotoFile" title="Remove this photo">x</button>
              </div>
            </div>
            <input class="util-full-width" type="file" name="photo" @change="addPhotoFromFile" ref="photoFileInput" title="Add Photo via Upload"/>
          </div>
        </div>
        {% endraw %}
      </div>
    </div>
    <div class="row">
      <div class="two-thirds column">
        <label for="content">Description</label>
        <textarea class="util-full-width" name="content"></textarea>
      </div>
    </div>
    {% if config['syndicate-to'] %}
      <div class="row">
        <div class="two-thirds column" style="margin-bottom: 2.5rem">
          <label>Syndicate-To</label>
          {% for synd in config['syndicate-to'] %}
          <label class="syndicate-to-option">
              <input type="checkbox" name="mp-syndicate-to[]" value="{{ synd.uid }}">
              <span class="label-body">{{ synd.name }}</span>
          </label>
          {% endfor %}
        </div>
      </div>
    {% endif %}
    <div class="row">
      <div class="two-thirds column">
        <input type="submit" class="button-primary" value="Create Event" />
      </div>
    </div>
  </form>
</div>
<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function() {
  flatpickr("input.datetime", {
    enableTime: true,
    altInput: true,
    altFormat: "F j, Y h:i K"
  });

  var tf = new Tokenfield({
    el: document.getElementById("category"),
    newItems: true,
    newItemName: 'category'
  });
  var app = new Vue({
    el: '#photos',
    data: {
      'mp-config': {{ config | safe }},
      'photos': [],
      'photoFile': null,
      'photoInput': null
    },
    computed: {
      hasMediaEndpoint: function() {
        return(this['mp-config']['media-endpoint'] !== undefined)
      }
    },
    methods: {
      addPhotoFromUrl: function(){
        this.photos.push(this.photoInput);
        this.photoInput = null;
      },
      addPhotoFromFile: function(event){
        if (event && event.target.files[0]) {
          var file = event.target.files[0];
          this.photoFile = URL.createObjectURL(file);
          if(this.hasMediaEndpoint) {
            // Send file to micropub media endpoint
            var self = this;
            var formData = new FormData();
            formData.append('file', file);
            var request = new XMLHttpRequest();
            request.open("POST", "{{ url_for('api.publish_media') }}");
            request.onreadystatechange = function() {
              if(request.readyState == XMLHttpRequest.DONE) {
                try {
                  var response = JSON.parse(request.responseText);
                  if(response.location) {
                    self.photos.push(response.location);
                    self.removePhotoFile();
                  } else {
                    console.log("Endpoint did not return a location header", response);
                  }
                } catch(e) {
                  console.log(e);
                }
              }
            }
            request.send(formData);
          }
        } else {
          this.removePhotoFile();
        }
      },
      removePhoto: function(idx){
        this.photos.splice(idx,1);
      },
      removePhotoFile: function(){
        this.photoFile = null;
        this.$refs.photoFileInput.value = null;
      },
    }
  });
});
</script>
{% endblock %}
